<div id="issuing" class="tab" style="display:none;">
    <div class="w3-container w3-card w3-padding w3-margin" style="float: left;width: 31%">
        <h3>Create Schema: </h3>
        <form method="POST" action="/api/issuer/create_schema" onsubmit="submit_btn(this); return false;">
            <label>Name of Schema: </label>
            <input type="text" class="w3-input" name="name_of_schema" value="Transcript">
            <br>
            <label>Schema Version: </label>
            <input type="text" class="w3-input" name="version" value="1.3">
            <br>
            <label>Please supply a JSON array of attributes:</label><br>
            <textarea style="height:220px;" class="w3-input" name="attributes" required>[
    "name",
    "degree",
    "status",
    "year",
    "average",
    "ssn"
]</textarea>
<br>
            <div style="margin-bottom: 1em;">
                <div style="display:flex; margin-bottom:0.5rem;">
                    <label style="margin-right: 0.5rem;">Attach File: </label>
                    <input type="file" id="photo_of_schema" name="photo_of_schema">
                </div>
                <div class="image_preview"></div>
                <input type="hidden" id="photo_url" name="photo_url" value="" /> 
            </div>
            <input class="w3-btn w3-white w3-border" id="submit-btn" name="submitbtn" type="submit">
        </form>
    </div>

    <script type="text/javascript">
        function submit_btn(form) {
            form.submitbtn.disabled = true;
            form.submit();
        }
        const input = document.querySelector('#photo_of_schema');
        const preview = document.querySelector('.image_preview');

        input.addEventListener('change', updateImageDisplay);
        async function updateImageDisplay() {
            while(preview.firstChild) {
                preview.removeChild(preview.firstChild);
            }

            const curFiles = input.files;
            if (curFiles.length === 0) {
                const para = document.createElement('p');
                para.textContent = 'No file currently selected for upload';
                preview.appendChild(para);
            } else {
                // const list = document.createElement('div');
                // preview.appendChild(list);

                const file = curFiles[0];
                // const listItem = document.createElement('div');
                const para = document.createElement('p');
                const projectId = '277J4qfFtNMoU4VjPgwkSC7agwj'
                const projectSecret = '25dbbdefd169318ba0dd5d82708f080a';
                const Buffer = window.IpfsHttpClient().Buffer;
                const ipfs_auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');
                const ipfs = window.IpfsHttpClient({ host: 'ipfs.infura.io', port: '5001', protocol: 'https', headers: {authorization: ipfs_auth}});

                // if (validFileType(file)) {
                    var submit_btn = document.getElementById('submit-btn');
                    if (submit_btn != null) submit_btn.disabled = true;  
                    // const image = document.createElement('img');
                    // image.width = 200;
                    // image.height = 200;
                    // listItem.appendChild(image);
                    const buffer_str = await file.arrayBuffer();
                    ipfs.add(Buffer(buffer_str), (err, result) => { // Upload buffer to IPFS
                        if(err) {
                            console.error(err)
                            return
                        }
                        let url = `https://ipfs.io/ipfs/${result[0].hash}`
                        // image.src = url;
                        console.log(`Url --> ${url}`)
                        document.getElementById("photo_url").value= url;
                        if (submit_btn != null) submit_btn.disabled = false;  
                    })
                // } else {
                //     para.textContent = `File name ${file.name}: Not a valid file type. Update your selection.`;
                //     listItem.appendChild(para);
                // }
                // list.appendChild(listItem);
            }
        }
        const fileTypes = [
            "image/apng",
            "image/bmp",
            "image/gif",
            "image/jpeg",
            "image/pjpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-icon"
        ];

        function validFileType(file) {
            return fileTypes.includes(file.type);
        }
        function returnFileSize(number) {
            if (number < 1024) {
                return `${number} bytes`;
            } else if (number >= 1024 && number < 1048576) {
                return `${(number / 1024).toFixed(1)} KB`;
            } else if (number >= 1048576) {
                return `${(number / 1048576).toFixed(1)} MB`;
            }
        }
    </script>

    <div style="float: left;width: 31%">
        <div class="w3-container w3-card w3-padding w3-margin">
            <h3>Create Credential Definition</h3>
            <form method="POST" action="/api/issuer/create_cred_def"  onsubmit="submit_btn(this); return false;">
                <label>Select a Schema:</label>
                <select class="w3-select" name="schema_id" required>
                    <%for(let schema of schemas) {%>
                    <option value="<%=schema.id%>"><%=schema.name%> <%=schema.version%></option>
                    <%}%>
                </select>
                <br><br>
                <label>Tag:</label>
                <input class="w3-input" type="text" name="tag" value="MyTranscript" required>
                <br><br>
                <input class="w3-btn w3-white w3-border" type="submit" name="submitbtn">
            </form>
        </div>
        <div class="w3-container w3-card w3-padding w3-margin">
            <h3>Send Credential Offer</h3>
            <form method="POST" action="/api/issuer/send_credential_offer" onsubmit="submit_btn(this); return false;">
                <label>Relationship: </label>
                <select class="w3-select" name="their_relationship_did" required>
                    <%for(let relationship of relationships) {%>
                        <option value="<%=relationship.their_did%>"><%=relationship.metadata.name%></option>
                    <%}%>
                </select>
                <br><br>
                <label>Select a Credential Definition:</label>
                <select class="w3-select" name="cred_def_id" required>
                    <%for(let credDef of credentialDefinitions) {%>
                        <option value="<%=credDef.id%>"><%=credDef.tag%></option>
                    <%}%>
                </select>
                <br><br>
                <input class="w3-btn w3-white w3-border" type="submit" name="submitbtn">
            </form>
        </div>
    </div>

</div>